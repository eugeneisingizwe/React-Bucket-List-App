[{"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\index.js":"1","C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\App.js":"2","C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\BucketList.js":"3","C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\BucketForm.js":"4","C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\Bucket.js":"5"},{"size":207,"mtime":1672803971924,"results":"6","hashOfConfig":"7"},{"size":204,"mtime":1672803971919,"results":"8","hashOfConfig":"7"},{"size":2562,"mtime":1673418077803,"results":"9","hashOfConfig":"7"},{"size":2907,"mtime":1673417556684,"results":"10","hashOfConfig":"7"},{"size":2036,"mtime":1673418196209,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w2qd4i",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\index.js",[],"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\App.js",[],"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\BucketList.js",[],"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\BucketForm.js",[],"C:\\Users\\eugen\\bootcamp\\gitlab\\React-Bucket-List-App\\src\\components\\Bucket.js",["23","24"],"import React, { useState } from 'react';\r\nimport BucketForm from './BucketForm';\r\n\r\nfunction Bucket(props) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: '',\r\n    eagerness: '',\r\n  });\r\n\r\n  console.log(props.bucket);\r\n\r\n  const submitUpdate = (value) => {\r\n\r\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\r\n    props.editBucketItem(edit.id, value);\r\n    \r\n\r\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\r\n    setEdit({id: null, value: \"\", eagerness: \"\"});\r\n\r\n  };\r\n\r\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\r\n  if (edit.id) {\r\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return props.bucket.map((item, index) => (\r\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\r\n    // TODO: Add a key attribute set to the value of the index position\r\n    // Hint: use a ternary operator\r\n    <div className={\r\n      item.isComplete\r\n      ? `bucket-row complete ${item.eagerness}`\r\n      : `bucket-row ${item.eagerness}`\r\n     } key={index}>\r\n\r\n      // TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument\r\n      <div key={item.id} onClick={() => props.completeBucketItem(item.id)}>\r\n          {/* TODO: Add the item text here */\r\n          item.text\r\n          }\r\n      </div>\r\n      <div className=\"icons\">\r\n        // TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties\r\n        <p onClick={() => setEdit({ id: item.id, value: item.text, eagerness: item.eagerness})}> ‚úèÔ∏è</p>\r\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\r\n        <p onClick={() => props.removeBucketItem(item.id)}> üóëÔ∏è</p>\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Bucket;\r\n",{"ruleId":"25","severity":1,"message":"26","line":37,"column":20,"nodeType":"27","messageId":"28","endLine":40,"endColumn":7},{"ruleId":"25","severity":1,"message":"26","line":45,"column":30,"nodeType":"27","messageId":"28","endLine":47,"endColumn":9},"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces"]